<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - SoniqAI</title>
    <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@200;300;400;500;600;700;800;900&family=Space+Grotesk:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700;800;900&family=IBM+Plex+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --gold-primary: #C9A961;
            --gold-accent: #E4C988;
            --gold-bright: #F2E7A7;
            --gold-dark: #B8985A;
            --navy-deep: #0B0D17;
            --navy-medium: #151922;
            --navy-light: #1F2332;
            --purple-dark: #1A0B2E;
            --purple-medium: #2D1B4E;
            --black-rich: #000000;
            --white-pure: #FFFFFF;
            --white-soft: #F8F9FA;
            --gray-light: #8892A6;
            --gray-medium: #5C6B7D;
            --gray-dark: #404854;
            --surface-glass: rgba(255, 255, 255, 0.02);
            --surface-glass-hover: rgba(255, 255, 255, 0.05);
            --surface-glass-strong: rgba(255, 255, 255, 0.08);
            --border-glass: rgba(201, 169, 97, 0.12);
            --border-glass-hover: rgba(201, 169, 97, 0.25);
            --border-glass-strong: rgba(201, 169, 97, 0.35);
            --success-color: #22C55E;
            --warning-color: #F59E0B;
            --error-color: #EF4444;
            --info-color: #3B82F6;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Outfit', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--navy-deep);
            color: var(--white-pure);
            line-height: 1.6;
            font-weight: 300;
        }

        /* Background System */
        .background-system {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: -2;
            background: linear-gradient(135deg, var(--navy-deep) 0%, var(--purple-dark) 50%, var(--navy-medium) 100%);
        }

        .mesh-gradient {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: -1;
            background: 
                radial-gradient(circle at 20% 80%, rgba(201, 169, 97, 0.05) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(45, 27, 78, 0.08) 0%, transparent 50%);
        }

        /* Header */
        .header {
            background: var(--surface-glass-strong);
            border-bottom: 1px solid var(--border-glass);
            backdrop-filter: blur(24px);
            padding: 16px 0;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 48px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .admin-shield {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, var(--warning-color), var(--gold-accent));
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            color: var(--black-rich);
        }

        .logo {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--gold-primary) 0%, var(--gold-bright) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            letter-spacing: -0.02em;
        }

        .admin-badge {
            background: linear-gradient(135deg, var(--warning-color), var(--gold-accent));
            color: var(--black-rich);
            padding: 4px 12px;
            border-radius: 100px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .logout-btn {
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            color: var(--white-pure);
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(12px);
            text-decoration: none;
        }

        .logout-btn:hover {
            background: var(--surface-glass-hover);
            border-color: var(--border-glass-hover);
        }

        /* Main Container */
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 48px;
            min-height: calc(100vh - 100px);
        }

        /* Dashboard Header */
        .dashboard-header {
            margin-bottom: 48px;
        }

        .dashboard-title {
            font-family: 'Playfair Display', serif;
            font-size: 36px;
            font-weight: 700;
            color: var(--white-pure);
            margin-bottom: 12px;
        }

        .dashboard-subtitle {
            font-size: 18px;
            color: var(--gray-light);
            font-weight: 300;
        }

        /* Tab System */
        .tabs-container {
            margin-bottom: 32px;
        }

        .tabs-nav {
            display: flex;
            gap: 4px;
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 12px;
            padding: 4px;
            backdrop-filter: blur(12px);
            margin-bottom: 24px;
        }

        .tab-btn {
            background: transparent;
            border: none;
            color: var(--gray-light);
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 500;
            flex: 1;
            text-align: center;
        }

        .tab-btn.active {
            background: var(--gold-primary);
            color: var(--black-rich);
        }

        .tab-btn:hover:not(.active) {
            background: var(--surface-glass-hover);
            color: var(--white-pure);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Upload Toggle */
        .upload-toggle {
            display: flex;
            gap: 4px;
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 8px;
            padding: 4px;
            margin-bottom: 24px;
        }

        .toggle-btn {
            background: transparent;
            border: none;
            color: var(--gray-light);
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 12px;
            font-weight: 500;
            flex: 1;
            text-align: center;
        }

        .toggle-btn.active {
            background: var(--gold-primary);
            color: var(--black-rich);
        }

        .toggle-btn:hover:not(.active) {
            background: var(--surface-glass-hover);
            color: var(--white-pure);
        }

        /* Cards */
        .card {
            background: var(--surface-glass-strong);
            border: 1px solid var(--border-glass);
            border-radius: 16px;
            padding: 24px;
            backdrop-filter: blur(24px);
            margin-bottom: 24px;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--border-glass);
        }

        .card-title {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 18px;
            font-weight: 600;
            color: var(--white-pure);
        }

        .card-action {
            background: var(--gold-primary);
            color: var(--black-rich);
            padding: 8px 16px;
            border-radius: 8px;
            border: none;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .card-action:hover {
            background: var(--gold-dark);
            transform: translateY(-1px);
        }

        /* Forms */
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            font-size: 14px;
            font-weight: 500;
            color: var(--gold-accent);
        }

        .form-input,
        .form-select,
        .form-textarea {
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 8px;
            padding: 12px 16px;
            font-size: 14px;
            color: var(--white-pure);
            font-family: inherit;
            transition: all 0.3s ease;
            backdrop-filter: blur(12px);
        }

        .form-textarea {
            min-height: 80px;
            resize: vertical;
        }

        .form-input:focus,
        .form-select:focus,
        .form-textarea:focus {
            outline: none;
            border-color: var(--gold-primary);
            box-shadow: 0 0 0 3px rgba(201, 169, 97, 0.1);
        }

        .form-input::placeholder,
        .form-textarea::placeholder {
            color: var(--gray-medium);
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input {
            position: absolute;
            left: -9999px;
        }

        .file-input-label {
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 8px;
            padding: 12px 16px;
            display: block;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            color: var(--gray-light);
        }

        .file-input-label:hover {
            background: var(--surface-glass-hover);
            border-color: var(--border-glass-hover);
        }

        .form-submit {
            background: linear-gradient(135deg, var(--gold-primary), var(--gold-accent));
            color: var(--black-rich);
            padding: 12px 24px;
            border-radius: 8px;
            border: none;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 24px rgba(201, 169, 97, 0.2);
        }

        .form-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 32px rgba(201, 169, 97, 0.3);
        }

        .form-submit:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Upload Mode Specific Styles */
        .upload-mode {
            display: none;
        }

        .upload-mode.active {
            display: block;
        }

        /* Progress Bar */
        .progress-container {
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 20px;
            display: none;
        }

        .progress-container.active {
            display: block;
        }

        .progress-bar {
            background: var(--surface-glass);
            border-radius: 6px;
            height: 8px;
            overflow: hidden;
            margin-bottom: 12px;
        }

        .progress-fill {
            background: linear-gradient(90deg, var(--gold-primary), var(--gold-accent));
            height: 100%;
            width: 0%;
            transition: width 0.3s ease;
        }

        .progress-text {
            font-size: 12px;
            color: var(--gray-light);
            text-align: center;
        }

        /* Upload Results */
        .upload-results {
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 8px;
            padding: 16px;
            margin-top: 20px;
            display: none;
        }

        .upload-results.active {
            display: block;
        }

        .result-summary {
            display: flex;
            gap: 20px;
            margin-bottom: 16px;
            text-align: center;
        }

        .result-stat {
            flex: 1;
            padding: 12px;
            border-radius: 6px;
        }

        .result-stat.success {
            background: rgba(34, 197, 94, 0.1);
            border: 1px solid rgba(34, 197, 94, 0.2);
        }

        .result-stat.error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        .result-number {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 4px;
        }

        .result-label {
            font-size: 12px;
            color: var(--gray-light);
        }

        .result-details {
            max-height: 200px;
            overflow-y: auto;
        }

        .result-item {
            padding: 8px 12px;
            margin-bottom: 4px;
            border-radius: 4px;
            font-size: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .result-item.success {
            background: rgba(34, 197, 94, 0.05);
            color: var(--success-color);
        }

        .result-item.error {
            background: rgba(239, 68, 68, 0.05);
            color: var(--error-color);
        }

        /* Lists */
        .list-container {
            max-height: 400px;
            overflow-y: auto;
        }

        .list-item {
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .list-item:hover {
            background: var(--surface-glass-hover);
            border-color: var(--border-glass-hover);
        }

        .list-item-info {
            flex: 1;
        }

        .list-item-title {
            font-size: 14px;
            font-weight: 500;
            color: var(--white-pure);
            margin-bottom: 4px;
        }

        .list-item-meta {
            font-size: 12px;
            color: var(--gray-light);
        }

        .list-item-actions {
            display: flex;
            gap: 8px;
        }

        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-danger {
            background: var(--error-color);
            color: var(--white-pure);
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-copy {
            background: var(--info-color);
            color: var(--white-pure);
        }

        .btn-copy:hover {
            background: #2563eb;
        }

        /* Status badges */
        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-normal {
            background: rgba(59, 130, 246, 0.2);
            color: var(--info-color);
        }

        .status-abundance {
            background: rgba(201, 169, 97, 0.2);
            color: var(--gold-accent);
        }

        .status-both {
            background: rgba(34, 197, 94, 0.2);
            color: var(--success-color);
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 40px;
            color: var(--gray-light);
        }

        .empty-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-title {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 8px;
            color: var(--white-pure);
        }

        .empty-text {
            font-size: 14px;
        }

        /* Success/Error messages */
        .message {
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }

        .message-success {
            background: rgba(34, 197, 94, 0.1);
            border: 1px solid rgba(34, 197, 94, 0.2);
            color: var(--success-color);
        }

        .message-error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            color: var(--error-color);
        }

        /* Statistics */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: var(--surface-glass);
            border: 1px solid var(--border-glass);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            backdrop-filter: blur(12px);
        }

        .stat-number {
            font-size: 24px;
            font-weight: 700;
            color: var(--gold-accent);
            margin-bottom: 8px;
        }

        .stat-label {
            font-size: 12px;
            color: var(--gray-light);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .header-container,
            .main-container {
                padding: 16px 24px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }

            .tabs-nav {
                flex-direction: column;
            }

            .list-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }

            .result-summary {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Background System -->
    <div class="background-system"></div>
    <div class="mesh-gradient"></div>

    <!-- Header -->
    <header class="header">
        <div class="header-container">
            <div class="header-left">
                <div class="admin-shield">🛡️</div>
                <div class="logo">SoniqAI</div>
                <div class="admin-badge">Administrator</div>
            </div>
            <div class="header-right">
                <a href="/admin/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </header>

    <!-- Main Container -->
    <div class="main-container">
        <div class="dashboard-header">
            <h1 class="dashboard-title">Admin Dashboard</h1>
            <p class="dashboard-subtitle">Manage your SoniqAI manifestation music platform</p>
        </div>

        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number"><%= songs.length %></div>
                <div class="stat-label">Total Songs</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= codes.length %></div>
                <div class="stat-label">Active Codes</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= usedCodes.length %></div>
                <div class="stat-label">Used Codes</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= songs.filter(s => s.plan === 'abundance').length %></div>
                <div class="stat-label">Abundance Tracks</div>
            </div>
        </div>

        <!-- Tabs -->
        <div class="tabs-container">
            <div class="tabs-nav">
                <button class="tab-btn active" onclick="switchTab('codes')">Access Codes</button>
                <button class="tab-btn" onclick="switchTab('songs')">Music Library</button>
                <button class="tab-btn" onclick="switchTab('upload')">Upload Music</button>
            </div>

            <!-- Access Codes Tab -->
            <div class="tab-content active" id="codes-tab">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Generate Access Code</h3>
                    </div>
                    
                    <form id="codeForm" onsubmit="generateCode(event)">
                        <div class="form-group">
                            <label class="form-label" for="codePlan">Plan Type</label>
                            <select id="codePlan" name="plan" class="form-select" required>
                                <option value="normal">Normal - Standard manifestation frequencies</option>
                                <option value="abundance">Abundance - Premium prosperity frequencies</option>
                            </select>
                        </div>
                        <button type="submit" class="form-submit">Generate New Code</button>
                    </form>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Active Access Codes</h3>
                    </div>
                    
                    <div class="list-container" id="activeCodesList">
                        <% if (codes && codes.length > 0) { %>
                            <% codes.forEach(code => { %>
                                <div class="list-item">
                                    <div class="list-item-info">
                                        <div class="list-item-title"><%= code.code %></div>
                                        <div class="list-item-meta">
                                            <span class="status-badge status-<%= code.plan %>"><%= code.plan %></span>
                                            • Created <%= new Date(code.createdAt).toLocaleDateString() %>
                                            • Expires <%= new Date(code.expiresAt).toLocaleDateString() %>
                                        </div>
                                    </div>
                                    <div class="list-item-actions">
                                        <button class="btn-small btn-copy" onclick="copyCode('<%= code.code %>')">Copy</button>
                                        <button class="btn-small" onclick="showCodeDetails('<%= code.code %>')">Details</button>
                                    </div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="empty-state">
                                <div class="empty-icon">🔑</div>
                                <div class="empty-title">No Active Codes</div>
                                <div class="empty-text">Generate access codes to allow new user registrations</div>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Songs Tab -->
            <div class="tab-content" id="songs-tab">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Music Library</h3>
                    </div>
                    
                    <div class="list-container">
                        <% if (songs && songs.length > 0) { %>
                            <% songs.forEach(song => { %>
                                <div class="list-item">
                                    <div class="list-item-info">
                                        <div class="list-item-title"><%= song.title %> - <%= song.artist %></div>
                                        <div class="list-item-meta">
                                            <span class="status-badge status-<%= song.plan %>"><%= song.plan %></span>
                                            <% if (song.duration) { %>• <%= song.duration %><% } %>
                                            <% if (song.genre) { %>• <%= song.genre %><% } %>
                                            • Added <%= new Date(song.uploadedAt).toLocaleDateString() %>
                                        </div>
                                    </div>
                                    <div class="list-item-actions">
                                        <button class="btn-small btn-danger" onclick="deleteSong('<%= song._id %>', '<%= song.title %>')">Delete</button>
                                    </div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="empty-state">
                                <div class="empty-icon">🎵</div>
                                <div class="empty-title">No Music Added</div>
                                <div class="empty-text">Upload manifestation tracks to build your music library</div>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Upload Tab -->
            <div class="tab-content" id="upload-tab">
                <!-- Upload Mode Toggle -->
                <div class="upload-toggle">
                    <button class="toggle-btn active" onclick="switchUploadMode('single')">Single Upload</button>
                    <button class="toggle-btn" onclick="switchUploadMode('mass')">Mass Upload</button>
                </div>

                <!-- Single Upload Mode -->
                <div class="upload-mode active" id="single-upload">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Upload Single Track</h3>
                        </div>
                        
                        <form id="songForm" onsubmit="uploadSong(event)" enctype="multipart/form-data">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label" for="songTitle">Track Title *</label>
                                    <input type="text" id="songTitle" name="title" class="form-input" placeholder="Enter track title" required>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label" for="songArtist">Artist *</label>
                                    <input type="text" id="songArtist" name="artist" class="form-input" placeholder="Enter artist name" required>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label" for="songAlbum">Album</label>
                                    <input type="text" id="songAlbum" name="album" class="form-input" placeholder="Enter album name">
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label" for="songDuration">Duration</label>
                                    <input type="text" id="songDuration" name="duration" class="form-input" placeholder="e.g., 3:45">
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label" for="songGenre">Genre</label>
                                    <input type="text" id="songGenre" name="genre" class="form-input" placeholder="e.g., Manifestation, Ambient">
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label" for="songPlan">Access Plan *</label>
                                    <select id="songPlan" name="plan" class="form-select" required>
                                        <option value="both">Both Plans - Available to all users</option>
                                        <option value="normal">Normal Only - Standard plan users</option>
                                        <option value="abundance">Abundance Only - Premium plan users</option>
                                    </select>
                                </div>
                                
                                <div class="form-group full-width">
                                    <label class="form-label" for="songDescription">Description</label>
                                    <textarea id="songDescription" name="description" class="form-textarea" placeholder="Describe the manifestation properties and benefits of this track"></textarea>
                                </div>
                                
                                <div class="form-group full-width">
                                    <label class="form-label" for="audioFile">Audio File *</label>
                                    <div class="file-input-wrapper">
                                        <input type="file" id="audioFile" name="audioFile" class="file-input" accept=".mp3,.wav,.flac,.m4a,.aac" required>
                                        <label for="audioFile" class="file-input-label" id="fileLabel">Choose audio file (MP3, WAV, FLAC, M4A, AAC)</label>
                                    </div>
                                </div>
                            </div>
                            
                            <button type="submit" class="form-submit" id="uploadBtn">Upload Track</button>
                        </form>
                    </div>
                </div>

                <!-- Mass Upload Mode -->
                <div class="upload-mode" id="mass-upload">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Mass Upload Tracks</h3>
                        </div>
                        
                        <form id="massUploadForm" onsubmit="massUploadSongs(event)" enctype="multipart/form-data">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label" for="massArtist">Artist *</label>
                                    <input type="text" id="massArtist" name="artist" class="form-input" placeholder="Enter artist name (applied to all files)" required>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label" for="massPlan">Access Plan *</label>
                                    <select id="massPlan" name="plan" class="form-select" required>
                                        <option value="both">Both Plans - Available to all users</option>
                                        <option value="normal">Normal Only - Standard plan users</option>
                                        <option value="abundance">Abundance Only - Premium plan users</option>
                                    </select>
                                </div>
                                
                                <div class="form-group full-width">
                                    <label class="form-label" for="massAudioFiles">Audio Files *</label>
                                    <div class="file-input-wrapper">
                                        <input type="file" id="massAudioFiles" name="audioFiles" class="file-input" accept=".mp3,.wav,.flac,.m4a,.aac" multiple required>
                                        <label for="massAudioFiles" class="file-input-label" id="massFileLabel">Choose multiple audio files (MP3, WAV, FLAC, M4A, AAC)</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="message" style="background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.2); color: var(--info-color); margin-bottom: 20px;">
                                <strong>Mass Upload Info:</strong> Song titles will be extracted from filenames. Descriptions will be auto-generated as "{filename} by {artist}". You can upload up to 50 files at once.
                            </div>
                            
                            <button type="submit" class="form-submit" id="massUploadBtn">Upload All Tracks</button>
                        </form>

                        <!-- Progress Container -->
                        <div class="progress-container" id="massProgressContainer">
                            <div class="progress-bar">
                                <div class="progress-fill" id="massProgressFill"></div>
                            </div>
                            <div class="progress-text" id="massProgressText">Uploading... 0 of 0 files</div>
                        </div>

                        <!-- Upload Results -->
                        <div class="upload-results" id="massUploadResults">
                            <div class="result-summary">
                                <div class="result-stat success">
                                    <div class="result-number" style="color: var(--success-color);" id="successCount">0</div>
                                    <div class="result-label">Successful</div>
                                </div>
                                <div class="result-stat error">
                                    <div class="result-number" style="color: var(--error-color);" id="errorCount">0</div>
                                    <div class="result-label">Failed</div>
                                </div>
                            </div>
                            <div class="result-details" id="resultDetails"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Tab switching
        function switchTab(tabName) {
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById(tabName + '-tab').classList.add('active');
        }

        // Upload mode switching
        function switchUploadMode(mode) {
            document.querySelectorAll('.toggle-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.upload-mode').forEach(upload => upload.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById(mode + '-upload').classList.add('active');
        }

        // Generate access code
        async function generateCode(event) {
            event.preventDefault();
            
            const form = event.target;
            const plan = form.plan.value;
            const submitBtn = form.querySelector('.form-submit');
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'Generating...';
            
            try {
                const response = await fetch('/admin/generate-code', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ plan })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage('Code generated successfully: ' + result.code, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showMessage('Error generating code: ' + result.error, 'error');
                }
            } catch (error) {
                showMessage('Network error: ' + error.message, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Generate New Code';
            }
        }

        // Upload single song
        async function uploadSong(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            const submitBtn = form.querySelector('.form-submit');
            
            if (!validateFile(document.getElementById('audioFile'))) return;
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'Uploading...';
            
            try {
                const response = await fetch('/admin/add-song', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage('Song uploaded successfully!', 'success');
                    form.reset();
                    document.getElementById('fileLabel').textContent = 'Choose audio file (MP3, WAV, FLAC, M4A, AAC)';
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showMessage('Error uploading song: ' + (result.error || 'Unknown error'), 'error');
                }
            } catch (error) {
                showMessage('Upload error: ' + error.message, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Upload Track';
            }
        }

        // Mass upload songs
        async function massUploadSongs(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            const submitBtn = form.querySelector('.form-submit');
            const files = document.getElementById('massAudioFiles').files;
            
            if (!validateFiles(files)) return;
            
            // Show progress container
            const progressContainer = document.getElementById('massProgressContainer');
            const resultsContainer = document.getElementById('massUploadResults');
            const progressFill = document.getElementById('massProgressFill');
            const progressText = document.getElementById('massProgressText');
            
            progressContainer.classList.add('active');
            resultsContainer.classList.remove('active');
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'Uploading...';
            
            progressText.textContent = `Preparing to upload ${files.length} files...`;
            
            try {
                const response = await fetch('/admin/mass-upload', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                // Update progress to complete
                progressFill.style.width = '100%';
                progressText.textContent = `Upload complete: ${files.length} files processed`;
                
                // Hide progress, show results
                setTimeout(() => {
                    progressContainer.classList.remove('active');
                    showMassUploadResults(result);
                }, 1000);
                
                if (result.success) {
                    showMessage(result.message, 'success');
                    form.reset();
                    document.getElementById('massFileLabel').textContent = 'Choose multiple audio files (MP3, WAV, FLAC, M4A, AAC)';
                    setTimeout(() => location.reload(), 3000);
                } else {
                    showMessage('Mass upload error: ' + (result.error || 'Unknown error'), 'error');
                }
            } catch (error) {
                progressContainer.classList.remove('active');
                showMessage('Mass upload error: ' + error.message, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Upload All Tracks';
            }
        }

        // Show mass upload results
        function showMassUploadResults(result) {
            const resultsContainer = document.getElementById('massUploadResults');
            const successCount = document.getElementById('successCount');
            const errorCount = document.getElementById('errorCount');
            const resultDetails = document.getElementById('resultDetails');
            
            if (result.results) {
                successCount.textContent = result.results.summary.successful;
                errorCount.textContent = result.results.summary.failed;
                
                let detailsHTML = '';
                
                // Show successful uploads
                if (result.results.successful && result.results.successful.length > 0) {
                    result.results.successful.forEach(item => {
                        detailsHTML += `
                            <div class="result-item success">
                                <span>${item.filename} → ${item.title}</span>
                                <span>✓</span>
                            </div>
                        `;
                    });
                }
                
                // Show failed uploads
                if (result.results.errors && result.results.errors.length > 0) {
                    result.results.errors.forEach(item => {
                        detailsHTML += `
                            <div class="result-item error">
                                <span>${item.filename}</span>
                                <span title="${item.error}">✗</span>
                            </div>
                        `;
                    });
                }
                
                resultDetails.innerHTML = detailsHTML;
            }
            
            resultsContainer.classList.add('active');
        }

        // Validate single file
        function validateFile(fileInput) {
            if (!fileInput.files.length) {
                showMessage('Please select an audio file', 'error');
                return false;
            }
            
            const file = fileInput.files[0];
            const maxSize = 50 * 1024 * 1024; // 50MB
            
            if (file.size > maxSize) {
                showMessage('File size must be less than 50MB', 'error');
                return false;
            }
            
            const allowedExtensions = /\.(mp3|wav|flac|m4a|aac)$/i;
            if (!allowedExtensions.test(file.name)) {
                showMessage('Only audio files are allowed (MP3, WAV, FLAC, M4A, AAC)', 'error');
                return false;
            }
            
            return true;
        }

        // Validate multiple files
        function validateFiles(files) {
            if (!files || files.length === 0) {
                showMessage('Please select audio files for mass upload', 'error');
                return false;
            }
            
            if (files.length > 50) {
                showMessage('Maximum 50 files allowed for mass upload', 'error');
                return false;
            }
            
            const maxSize = 50 * 1024 * 1024; // 50MB
            const allowedExtensions = /\.(mp3|wav|flac|m4a|aac)$/i;
            
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                
                if (file.size > maxSize) {
                    showMessage(`File "${file.name}" is too large. Maximum size is 50MB.`, 'error');
                    return false;
                }
                
                if (!allowedExtensions.test(file.name)) {
                    showMessage(`File "${file.name}" is not a valid audio file. Only MP3, WAV, FLAC, M4A, AAC are allowed.`, 'error');
                    return false;
                }
            }
            
            return true;
        }

        // Delete song
        async function deleteSong(songId, songTitle) {
            if (!confirm(`Are you sure you want to delete "${songTitle}"? This action cannot be undone.`)) {
                return;
            }
            
            try {
                const response = await fetch(`/admin/delete-song/${songId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage('Song deleted successfully', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showMessage('Error deleting song: ' + result.error, 'error');
                }
            } catch (error) {
                showMessage('Network error: ' + error.message, 'error');
            }
        }

        // Copy code to clipboard
        async function copyCode(code) {
            try {
                const cleanCode = code.trim();
                await navigator.clipboard.writeText(cleanCode);
                showMessage(`Code copied: ${cleanCode}`, 'success');
            } catch (error) {
                const cleanCode = code.trim();
                const textArea = document.createElement('textarea');
                textArea.value = cleanCode;
                textArea.style.position = 'fixed';
                textArea.style.opacity = '0';
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showMessage(`Code copied: ${cleanCode}`, 'success');
            }
        }

        // Show code details
        function showCodeDetails(code) {
            const cleanCode = code.trim();
            const details = `Code: ${cleanCode}\nLength: ${cleanCode.length} characters\nValid format: ${/^[A-Z0-9]+$/.test(cleanCode) ? 'Yes' : 'No'}`;
            alert(details);
        }

        // Show message
        function showMessage(text, type) {
            document.querySelectorAll('.message').forEach(msg => {
                if (!msg.querySelector('strong')) { // Don't remove info messages
                    msg.remove();
                }
            });
            
            const message = document.createElement('div');
            message.className = `message message-${type}`;
            message.textContent = text;
            
            const container = document.querySelector('.main-container');
            container.insertBefore(message, container.firstChild);
            
            setTimeout(() => {
                if (message.parentNode) {
                    message.remove();
                }
            }, 5000);
        }

        // File input handlers
        document.getElementById('audioFile').addEventListener('change', function(e) {
            const label = document.getElementById('fileLabel');
            if (e.target.files.length > 0) {
                const file = e.target.files[0];
                label.textContent = `Selected: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)} MB)`;
            } else {
                label.textContent = 'Choose audio file (MP3, WAV, FLAC, M4A, AAC)';
            }
        });

        document.getElementById('massAudioFiles').addEventListener('change', function(e) {
            const label = document.getElementById('massFileLabel');
            if (e.target.files.length > 0) {
                const totalSize = Array.from(e.target.files).reduce((sum, file) => sum + file.size, 0);
                label.textContent = `Selected: ${e.target.files.length} files (${(totalSize / 1024 / 1024).toFixed(1)} MB total)`;
            } else {
                label.textContent = 'Choose multiple audio files (MP3, WAV, FLAC, M4A, AAC)';
            }
        });

        // Initialize
        console.log('Admin dashboard loaded with mass upload support');
        console.log(`Managing ${<%= songs.length %>} songs and ${<%= codes.length %>} active codes`);
    </script>
</body>
</html>
